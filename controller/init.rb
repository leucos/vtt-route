# encoding: UTF-8

# Define a subclass of Ramaze::Controller holding your defaults for all controllers. Note 
# that these changes can be overwritten in sub controllers by simply calling the method 
# but with a different value.

class Controller < Ramaze::Controller
  layout :default
  helper :xhtml, :flash, :user, :fnordmetric
  engine :etanni

  # trait :fnord_redis_url => "redis://localhost:6379"

  #---------------------------------------------
  # Custom 404 handling methods
  #---------------------------------------------
  #
  # This overrides Ramaze's default 404 handler
  def self.action_missing(path)
    return if path == '/error_404'
    # No normal action, runs on bare metal
    try_resolve('/error_404')
  end

  # This is the action we call from the  
  #   404 handler to render the 404 page
  def error_404
    # Note: If you want to separate your view logic from 
    #   your controller logic you will need to use render_file
    #   - simply using a view does not work when the 404 is
    #   generated by a path not mapped to this controller.
    #
    #   Keep in mind that render_file takes a full path -
    #   so you should use something like 'Ramaze.options.views[0]'
    #   to get at your view directory
    flash[:error] = "Désolé, cette page n'existe pas"
    event(:status_404)
    render_file("#{Ramaze.options.views[0]}/error_404.xhtml")
  end
end

require 'pony'

require __DIR__('main')
require __DIR__('users')
require __DIR__('profiles')
require __DIR__('maps')

